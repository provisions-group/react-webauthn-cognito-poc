service: passwordless-otp-cognito-demo

frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-2

custom:
  # replace with your verified SES domain
  domain: provisionsgroup.com

functions:
  preSignUp:
    handler: functions/pre-sign-up.handler

  defineAuthChallenge:
    handler: functions/define-auth-challenge.handler

  createAuthChallenge:
    handler: functions/create-auth-challenge.handler

  verifyAuthChallengeResponse:
    handler: functions/verify-auth-challenge-response.handler
    iamRoleStatementsName: verifyAuthChallengeRes-cognito-idp_AdminUpdateUserAttributes
    iamRoleStatements:
      - Effect: Allow
        Action: cognito-idp:AdminUpdateUserAttributes
        # You will need to paste in the correct resource arn after it is created
        Resource: arn:aws:cognito-idp:us-east-2:298821895416:userpool/us-east-2_56O5hbcfY
        # Causes circular reference
        # Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${PasswordlessOtpUserPool.Arn}

resources:
  Resources:
    PasswordlessOtpUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - email
        Policies:
          # this is only to satisfy Cognito requirements
          # we won't be using passwords, but we also don't
          # want weak passwords in the system ;-)
          PasswordPolicy:
            MinimumLength: 16
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: false
            Required: true
            Name: email
            StringAttributeConstraints:
              MinLength: "8"
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
          DefineAuthChallenge: !GetAtt DefineAuthChallengeLambdaFunction.Arn
          CreateAuthChallenge: !GetAtt CreateAuthChallengeLambdaFunction.Arn
          VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref PasswordlessOtpUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    UserPoolPreSignUpLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref PreSignUpLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn

    UserPoolDefineAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref DefineAuthChallengeLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn

    UserPoolCreateAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref CreateAuthChallengeLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn

    UserPoolVerifyAuthChallengeResponseLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref VerifyAuthChallengeResponseLambdaFunction
        SourceArn: !GetAtt PasswordlessOtpUserPool.Arn
