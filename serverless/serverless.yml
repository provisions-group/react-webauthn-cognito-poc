service: webauthn-cognito-demo

frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2

custom:
  webpack:
    includeModules: true

package:
  excludeDevDependencies: false

functions:
  preSignUp:
    handler: ./functions/pre-sign-up.handler

  defineAuthChallenge:
    handler: ./functions/define-auth-challenge.handler

  createAuthChallenge:
    handler: ./functions/create-auth-challenge.handler

  verifyAuthChallengeResponse:
    handler: ./functions/verify-auth-challenge-response.handler
    # Leave the following section commented out on the first deployment.
    # Enable this section once you can add the created user pool resource arn
    # iamRoleStatementsName: verifyAuthChallengeRes-cognito-idp_AdminUpdateUserAttributes
    # iamRoleStatements:
    #   - Effect: Allow
    #     Action: cognito-idp:AdminUpdateUserAttributes
    #     # Paste User Pool Resource ARN here
    #     Resource: your-resource-arn

resources:
  Resources:
    WebAuthnUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: false
            Required: true
            Name: email
            StringAttributeConstraints:
              MinLength: "8"
          - AttributeDataType: String
            Mutable: true
            Required: false
            Name: devices
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
          DefineAuthChallenge: !GetAtt DefineAuthChallengeLambdaFunction.Arn
          CreateAuthChallenge: !GetAtt CreateAuthChallengeLambdaFunction.Arn
          VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref WebAuthnUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    UserPoolPreSignUpLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref PreSignUpLambdaFunction
        SourceArn: !GetAtt WebAuthnUserPool.Arn

    UserPoolDefineAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref DefineAuthChallengeLambdaFunction
        SourceArn: !GetAtt WebAuthnUserPool.Arn

    UserPoolCreateAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref CreateAuthChallengeLambdaFunction
        SourceArn: !GetAtt WebAuthnUserPool.Arn

    UserPoolVerifyAuthChallengeResponseLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref VerifyAuthChallengeResponseLambdaFunction
        SourceArn: !GetAtt WebAuthnUserPool.Arn
